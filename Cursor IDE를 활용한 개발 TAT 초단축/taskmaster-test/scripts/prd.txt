# nkwiki: 자동 코드베이스 문서화 도구

## 프로젝트 개요

nkwiki는 코드베이스를 자동으로 분석하여 고품질의 문서를 생성하는 도구입니다. Git 저장소나 로컬 폴더를 입력으로 받아 ReadTheDocs 스타일의 상세한 문서를 생성합니다.

## 우선순위 및 개발 계획

### 최우선 개발 기능 (로컬 기능 구현)
- 로컬 폴더 코드 파싱 및 분석 엔진
- 기본 문서 생성 기능 (마크다운 파일 출력)
- 코드 구조 추출 (클래스, 함수, 모듈)
- CLI 인터페이스 (기본 명령어 지원)

### 확장 기능 (핵심 기능 이후 개발)
- Git 저장소 지원
- 향상된 문서 형식 (HTML, ReadTheDocs 스타일)
- 다이어그램 및 시각적 자료 생성
- 웹 인터페이스

### 미래 기능 (나중에 개발)
- 플러그인 시스템
- CI/CD 통합
- 컨테이너화 및 클라우드 배포
- 성능 최적화 및 대규모 코드베이스 지원

## 핵심 기능 요구사항

### 1. 코드 분석 엔진 (최우선)
- 소스 코드 분석
  - 주요 프로그래밍 언어 자동 감지 (우선 Python 지원)
  - 클래스/함수/모듈 구조 파악
  - 코드 주석 및 문서화 문자열 추출
- 프로젝트 구조 분석
  - 디렉토리 구조 및 계층 관계
  - 주요 설정 파일 식별 (package.json, requirements.txt 등)

### 2. 문서 생성 기능 (최우선)
- 마크다운 파일 생성
  - 프로젝트 개요
  - 모듈/클래스/함수 레퍼런스
  - 코드 예제
- 기본 문서 구조
  - 프로젝트 개요
  - 모듈별 문서
  - 함수/클래스 참조
- 일관된 포맷팅
  - 마크다운 문법 준수
  - 코드 블록 구문 강조

### 3. 입력 처리 (우선)
- 로컬 폴더 경로 입력 지원 (최우선)
  - 절대 경로/상대 경로 모두 지원
  - 하위 폴더 재귀적 분석
- Git 저장소 URL 입력 지원 (나중에)
  - HTTPS/SSH 프로토콜 모두 지원
  - 공개/비공개 저장소 모두 지원
  - 특정 브랜치/태그/커밋 지정 가능

### 4. CLI 인터페이스 (우선)
- 기본 명령어
  - 분석 명령
  - 문서 생성 명령
  - 설정 관리
- 사용 예제
  - 단일 파일 분석
  - 프로젝트 전체 분석
  - 문서 생성 위치 지정

### 5. 고급 문서 기능 (나중에)
- ReadTheDocs 스타일 문서 생성
  - 깔끔하고 전문적인 디자인
  - 반응형 웹 디자인
  - 다크 모드 지원
- 검색 기능
  - 전체 텍스트 검색
  - 실시간 검색 제안
- 내비게이션
  - 계층적 목차
  - 빠른 섹션 이동
  - 관련 문서 링크
- 시각적 자료
  - 아키텍처 다이어그램
  - 시퀀스 다이어그램
  - 클래스/객체 관계도

### 6. 버전 관리 통합 (나중에)
- 버전 관리 정보 분석 (Git 저장소의 경우)
  - 커밋 히스토리 분석
  - 주요 기여자 식별
  - 브랜치 전략 파악

## 기술 요구사항

### 필수 기술 (최우선)
- 개발 환경
  - Python 3.8 이상
- 핵심 라이브러리
  - 코드 파싱: AST 파서 (Python ast)
  - 마크다운 처리 라이브러리 (예: markdown, mdx_gfm)

### 확장 기술 (나중에)
- 개발 환경
  - TypeScript/Node.js 16 이상 (웹 인터페이스용)
- 추가 라이브러리
  - Git 조작: GitPython 또는 유사 라이브러리
  - 문서 생성: Sphinx 또는 유사 문서 생성 엔진
  - 웹 인터페이스: FastAPI/Express.js, React/Vue.js

### 비기능적 요구사항 (단계적 구현)
- 성능
  - 초기: 소규모 프로젝트 처리 (1만 라인 이내)
  - 나중에: 대규모 코드베이스 지원 (100만 라인 이상)
- 확장성
  - 초기: Python 코드 파싱 및 분석
  - 나중에: 다중 언어 지원, 플러그인 시스템
- 보안 (나중에)
  - 비공개 저장소 접근
  - 민감 정보 처리
- 배포 (나중에)
  - 컨테이너화 및 클라우드 배포
  - CI/CD 통합

## 제품 로드맵 (수정됨)

### Phase 1: 핵심 기능 개발 (1-2개월)
- **최우선**: 로컬 Python 코드 분석 엔진
- **최우선**: 기본 마크다운 문서 생성
- **최우선**: CLI 인터페이스 구현
- 단위 테스트 및 기능 검증

### Phase 2: 기능 확장 (1-2개월)
- Git 저장소 지원 추가
- 추가 언어 파싱 지원 (JavaScript/TypeScript)
- HTML 문서 생성 기능
- 기본 다이어그램 생성

### Phase 3: 고급 기능 (2개월)
- 웹 인터페이스 개발
- ReadTheDocs 스타일 문서 생성
- 검색 및 내비게이션 기능
- 고급 다이어그램 및 시각자료

### Phase 4: 엔터프라이즈 및 배포 (1-2개월)
- 대규모 코드베이스 최적화
- 컨테이너화 (Docker)
- CI/CD 통합
- 플러그인 시스템 